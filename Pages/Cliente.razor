@page "/Cliente/{idCliente:long}"
@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Services

<EditForm Model="@Model" OnValidSubmit="@Submit">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <RadzenRow class="mb-3">
        <RadzenColumn Size="2">
            <RadzenFormField Text="Id do Cliente" class="w-100">
                <RadzenNumeric Value="@Model.idCliente" Format="000000" ShowUpDown=false TextAlign="TextAlign.Center" Disabled=true></RadzenNumeric>
                <RadzenRequiredValidator Text="Nome obrigatório" />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="3">
            <RadzenFormField Text="Nome" class="w-100">
                <RadzenNumeric @bind-Value="Model.Nome" />
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>

    <Endereco endereco="Model" ></Endereco>

    <RadzenRow class="mt-3">
        <RadzenColumn Size="4">
            <RadzenFormField Text="CPF" class="w-100">
                <RadzenMask @bind-Value="Model.CPF" Mask="***.***.***-**" CharacterPattern="[0-9]" />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="4">
            <RadzenFormField Text="Email" class="w-100">
                <RadzenNumeric @bind-Value="Model.Email" />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="4">
            <RadzenFormField Text="RG" class="w-100">
                <RadzenMask @bind-Value="Model.RG" Mask="***.***.***-*" CharacterPattern="[0-9]" />
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>
</EditForm>

@code {
    Contexto ctx = new();

    [Parameter]
    public long? idCliente { get; set; }

    public cliente Model { get; set; } = new();
    protected override void OnInitialized()
    {
        Model = ctx.clientes.Find(idCliente) ?? new();
        if (Model == null)
            Model = new cliente();
    }

    [Inject] NotificationService notificationService { get; set; } = default!;

    public async Task Submit()
    {
        if (Model.idCliente == 0)
            ctx.Entry(Model).State = Microsoft.EntityFrameworkCore.EntityState.Added;
        else
            ctx.Entry(Model).State = Microsoft.EntityFrameworkCore.EntityState.Modified;

        await ctx.SaveChangesAsync();

        notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Cadastro de clientes", Detail = "Alterações do cliente foram salvas com sucesso!", Duration = 4000 });
    }
}