@page "/NotasCompra/Form/{idNotaCompra:long}"

@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Components
@using Microsoft.EntityFrameworkCore

<EditForm Model="Model" id=formId OnValidSubmit=Submit>
    <PageHeader Title="Compras" Description="Nota Fiscal de Compras">
    </PageHeader>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <FluentGrid>
        <FluentGridItem md="2">
            <FluentTextField Label="Id" Value="@Model.IdNotaCompra.ToString("000000")" Disabled=true />
        </FluentGridItem>
        <FluentGridItem md="2">
            <FluentTextField Label="Número da NF" @bind-Value="Model.NumeroNF" />
        </FluentGridItem>
        <FluentGridItem md="2">
            <FluentDatePicker Label="Data" Value="Model.Data" ValueChanged="e=>Model.Data=e.Value" />
        </FluentGridItem>
        <FluentGridItem md="3">
            <FluentCombo @bind-Value=Model.Fornecedor ModalSize="modal-lg" Items="Contexto.fornecedores" Label="Fornecedor" OptionText="e=>e.Nome" TItem="fornecedor">
                <OnEdit Context="itm">
                    <ProSoft.Pages.Cadastros.Fornecedor Contexto="Contexto" Model="Model.Fornecedor??new()" />
                </OnEdit>
            </FluentCombo>
        </FluentGridItem>
        <FluentGridItem md="3">
            <FluentTextField Label="Xml" @bind-Value=Model.Xml/>
        </FluentGridItem>
    </FluentGrid>

    <FluentDataGrid Class="mt-3" GenerateHeader=GenerateHeaderOption.None TGridItem="compra" role="grid" GridTemplateColumns="10% 10% 34% 10% 10% 10% 10% 5%" >
        <FluentDataGridRow RowType="DataGridRowType.Header">
            <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader">Quant.</FluentDataGridCell>
            <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader">Un.</FluentDataGridCell>
            <FluentDataGridCell GridColumn=3 CellType="DataGridCellType.ColumnHeader">Descrição</FluentDataGridCell>
            <FluentDataGridCell GridColumn=4 CellType="DataGridCellType.ColumnHeader">Unitário</FluentDataGridCell>
            <FluentDataGridCell GridColumn=5 CellType="DataGridCellType.ColumnHeader">Total</FluentDataGridCell>
            <FluentDataGridCell GridColumn=6 CellType="DataGridCellType.ColumnHeader">Margem</FluentDataGridCell>
            <FluentDataGridCell GridColumn=7 CellType="DataGridCellType.ColumnHeader">P. Venda</FluentDataGridCell>
            <FluentDataGridCell GridColumn="8" CellType="DataGridCellType.ColumnHeader"><FluentButton IconEnd="new Icons.Regular.Size20.AddCircle()" OnClick="()=>Model.Items.Add(new compra())" /></FluentDataGridCell>
        </FluentDataGridRow>
        @foreach (compra v in Model.Items)
        {
            <FluentDataGridRow Item="v" TGridItem="compra">
                <FluentDataGridCell GridColumn=1><FluentNumberField HideStep=true @bind-Value=v.Quantidade /></FluentDataGridCell>
                <FluentDataGridCell GridColumn=2><FluentTextField Value="@v.Mercadoria?.Unidade" Disabled=true /></FluentDataGridCell>
                <FluentDataGridCell GridColumn=3>
                    <FluentCombobox Required=true Context="ctx" @bind-SelectedOption=v.Mercadoria Items="Contexto.mercadorias" OptionText="e=>e.Descricao" TOption="mercadoria">
                    </FluentCombobox>
                    <FluentValidationMessage TValue=mercadoria For="()=>v.Mercadoria" />
                </FluentDataGridCell>
                <FluentDataGridCell GridColumn=4><FluentNumberField HideStep=true @bind-Value=@v.Custo /></FluentDataGridCell>
                <FluentDataGridCell GridColumn=5><FluentNumberField HideStep=true Value="v.Quantidade*v.Custo" Disabled=true /></FluentDataGridCell>
                <FluentDataGridCell GridColumn=6><FluentNumberField HideStep=true @bind-Value=v.Margem /></FluentDataGridCell>
                <FluentDataGridCell GridColumn=7><FluentNumberField HideStep=true Value="v.Custo*(1f+v.Margem)" /></FluentDataGridCell>
                <FluentDataGridCell GridColumn=8 Class="">
                    <FluentButton IconStart="new Icons.Regular.Size20.Delete()" OnClick="()=>Model.Items.Remove(v)" />
                </FluentDataGridCell>
            </FluentDataGridRow>
        }
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn=1></FluentDataGridCell>
            <FluentDataGridCell GridColumn=2></FluentDataGridCell>
            <FluentDataGridCell GridColumn=3></FluentDataGridCell>
            <FluentDataGridCell GridColumn=4><strong>Total</strong></FluentDataGridCell>
            <FluentDataGridCell GridColumn=5><strong>@Model.Items.Sum(k=>k.Quantidade*k.Custo)</strong></FluentDataGridCell>
            <FluentDataGridCell GridColumn=6></FluentDataGridCell>
            <FluentDataGridCell GridColumn=7></FluentDataGridCell>
        </FluentDataGridRow>
    </FluentDataGrid>

</EditForm>

@code {
    [Parameter] public notacompra Model{ get; set; } = new();
    //[Inject] public NotificationService notificationService {get;set;} = default!;
    [Parameter, EditorRequired] public Contexto Contexto {get;set;} = default!;

    IEnumerable<fornecedor> fornecedores = new List<fornecedor>();

    protected override void OnInitialized()
    {
        if (Model.Fornecedor != null)
        {
            fornecedores = new fornecedor[] { Model.Fornecedor };
        }

        base.OnInitialized();
    }

    void AddRow()
    {
        compra c = new();
        Model.Items.Add(c);
        StateHasChanged();
    }
    void Submit()
    {
        if (Model!.IdNotaCompra == 0)
            Contexto.Entry(Model).State = EntityState.Added;
        else
            Contexto.Entry(Model).State = EntityState.Modified;

        if (fornecedores != null)
            Model.Fornecedor = fornecedores.First();

        Contexto.SaveChanges();

        Model = Contexto.notascompra.First(k=>k.IdNotaCompra == Model.IdNotaCompra);

        //notificationService.Notify(NotificationSeverity.Success, "Venda", "Todos os dados da Venda foram salvos  com sucesso");

        StateHasChanged();
    }

    void DeleteRow(compra compra)
    {
        Model!.Items.Remove(compra);
    }

    void MercadoriaChanged(compra c) {
        c.Mercadoria = Contexto.Find<mercadoria>(c.Mercadoria_IdMercadoria);
    }
}
