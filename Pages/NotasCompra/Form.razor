@page "/NotasCompra/Form/{idNotaCompra:long}"

@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Components
@using Microsoft.EntityFrameworkCore

<EditForm Model="Model" id=formId OnValidSubmit=Submit>
    <PageHeader Title="Compras" Description="Nota Fiscal de Compras">
    </PageHeader>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <FluentGrid>
        <FluentGridItem md="2">
            <FluentTextField Label="Id" Value="@Model.IdNotaCompra.ToString("000000")" Disabled=true />
        </FluentGridItem>
        <FluentGridItem md="2">
            <FluentTextField Label="Número da NF" @bind-Value="Model.NumeroNF" />
        </FluentGridItem>
        <FluentGridItem md="2">
            <FluentDatePicker Label="Data" Value="Model.Data" ValueChanged="e=>Model.Data=e.Value" />
        </FluentGridItem>
        <FluentGridItem md="3">
            <FluentAutocomplete TOption="fornecedor"
                                MaximumSelectedOptions="1"
                                AutoComplete="off"
                                Label="Fornecedor"
                                OnOptionsSearch="(e)=>e.Items=Contexto.fornecedores.Where(k=>k.Nome.Contains(e.Text)).OrderBy(k=>k.Nome)"
                                Placeholder="Selecione um fornecedor"
                                OptionText="e=>e.Nome"
                                @bind-SelectedOptions=@fornecedores />
        </FluentGridItem>
        <FluentGridItem md="3">
            <FluentTextField Label="Xml" @bind-Value=Model.Xml/>
        </FluentGridItem>
    </FluentGrid>

    <GenericTemplate TItem=compra Items=Model.Items Context=Contexto OnAdd=AddRow OnDelete=DeleteRow>
        <TableHeader>
            <th>Qt.</th>
            <th>Un</th>
            <th>Descrição</th>
            <th>P. Custo</th>
            <th>Total</th>
            <th>P. Venda</th>
        </TableHeader>
        <RowTemplate Context=c>
            <Row GetMercadorias="()=>Contexto.mercadorias.ToArray()" 
                Model="c" 
                MercadoriaChanged='()=>MercadoriaChanged(c)' 
                TotalChanged="()=>StateHasChanged()" 
                Contexto="Contexto"
                />
        </RowTemplate>
        <TableFooter>
            <td colspan="4" class="text-end">Total</td>
            <td>
                <FluentTextField Value="@Model.Total.ToString("N2")" Disabled=true/>
            </td>
            <td colspan="2"></td>
        </TableFooter>
    </GenericTemplate>

</EditForm>

@code {
    [Parameter] public notacompra Model{ get; set; } = new();
    //[Inject] public NotificationService notificationService {get;set;} = default!;
    [Parameter, EditorRequired] public Contexto Contexto {get;set;} = default!;

    IEnumerable<fornecedor> fornecedores = new List<fornecedor>();

    protected override void OnInitialized()
    {
        if (Model.Fornecedor != null)
        {
            fornecedores = new fornecedor[] { Model.Fornecedor };
        }

        base.OnInitialized();
    }

    void AddRow()
    {
        compra c = new();
        Model.Items.Add(c);
        StateHasChanged();
    }
    void Submit()
    {
        if (Model!.IdNotaCompra == 0)
            Contexto.Entry(Model).State = EntityState.Added;
        else
            Contexto.Entry(Model).State = EntityState.Modified;

        if (fornecedores != null)
            Model.Fornecedor = fornecedores.First();

        Contexto.SaveChanges();

        Model = Contexto.notascompra.First(k=>k.IdNotaCompra == Model.IdNotaCompra);

        //notificationService.Notify(NotificationSeverity.Success, "Venda", "Todos os dados da Venda foram salvos  com sucesso");

        StateHasChanged();
    }

    void DeleteRow(compra compra)
    {
        Model!.Items.Remove(compra);
    }

    void MercadoriaChanged(compra c) {
        c.Mercadoria = Contexto.Find<mercadoria>(c.Mercadoria_IdMercadoria);
    }
}
