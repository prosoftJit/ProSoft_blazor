@page "/NotasCompra/Form/{idNotaCompra:long}"

@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Components
@using Microsoft.EntityFrameworkCore

<EditForm id="formId" EditContext="@editContext" OnValidSubmit="Submit">

    <PageHeader Title="Compras" Description="Nota Fiscal de Compras">
        <BarItems>
            <RadzenButton Icon="save" Click="Submit"><RadzenIcon Icon="save" /> Salvar</RadzenButton>
            <RadzenButton Icon="add" Click="()=>AddRow()">Novo Item</RadzenButton>
        </BarItems>
    </PageHeader>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <RadzenRow RowGap="1rem">
        <RadzenColumn Size="2">
            <RadzenFormField class="w-100" Text="Id">
                <RadzenNumeric Format="000000" Value="@Model.IdNotaCompra" TextAlign="TextAlign.Center" Disabled=true ShowUpDown=false />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="2">
            <RadzenFormField class="w-100" Text="Número da NF">
                <RadzenTextBox @bind-Value="Model.NumeroNF" TextAlign=TextAlign.Center />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="2">
            <RadzenFormField class="w-100" Text="Data">
                <RadzenDatePicker @bind-Value="Model.Data" />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="3">
            <RadzenFormField class="w-100" Text="Fornecedor">
                <RadzenDropDown AllowClear="true" class="form-control" @bind-Value=Model.Fornecedor_IdFornecedor AllowVirtualization="true"
                        AllowFiltering="true" Data=ctx.fornecedores.ToArray() TextProperty="Nome" ValueProperty="IdFornecedor" Change='()=>ctx.Entry(Model).Navigation("Fornecedor").Load()' />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="3">
            <RadzenFormField class="w-100" Text="Xml">
                <RadzenTextBox @bind-Value="Model.Xml"/>
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>

    <table class="table mt-2">
        <thead>
            <tr>
                <th>Qt.</th>
                <th>Un</th>
                <th>Descrição</th>
                <th>P. Custo</th>
                <th>Total</th>
                <th>P. Venda</th>
                <th width="1%"><button type="button" class="btn btn-link btn-sm d-print-none" @onclick="()=>AddRow()"><i class="oi oi-plus"></i></button></th>
            </tr>
        </thead>
        <tbody>
        @foreach(compra c in Model.Items)
        {
            <tr>
            <Row GetMercadorias="()=>ctx.mercadorias.ToArray()" 
                Model="c" OnDelete="(c)=>{rowToDelete=c;StateHasChanged();}" MercadoriaChanged='()=>MercadoriaChanged(c)' TotalChanged="()=>StateHasChanged()" />
            </tr>
        }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="4" class="text-end">Total</td>
                <td><RadzenNumeric Format="N2" TextAlign="TextAlign.End" Value="Model.Total" Disabled=true ShowUpDown=false /></td>
                <td colspan="2"></td>
            </tr>
        </tfoot>
    </table>

</EditForm>

@if (rowToDelete != null)
{
    <ModalConfirm Title="Excluir" Message="Confirma exclusão da linha?" OnClose="DeleteRow"></ModalConfirm>
}

@code {
    [Parameter] public long idNotaCompra{ get; set; }
    [Inject] public NotificationService notificationService {get;set;} = default!;

    notacompra Model = new();
    Contexto ctx = new();

    void AddRow()
    {
        compra c = new();
        Model.Items.Add(c);
        StateHasChanged();
    }

    void CalcTotal()
    {
            StateHasChanged();
            return;

        @* float tot = 0;
        if (Model == null)
            return;
            
         tot = Model.Items.Sum(k => (k.Quantidade * k.Custo));
        if (tot != _total)
        {
            _total = tot;
            StateHasChanged();
        } *@
    }

    void Submit()
    {
        if (Model!.IdNotaCompra == 0)
            ctx.Entry(Model).State = EntityState.Added;
        else
            ctx.Entry(Model).State = EntityState.Modified;

        ctx.SaveChanges();

        Model = ctx.notascompra.First(k=>k.IdNotaCompra == Model.IdNotaCompra);

        notificationService.Notify(NotificationSeverity.Success, "Venda", "Todos os dados da Venda foram salvos  com sucesso");

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Model = ctx.notascompra.Include(k => k.Fornecedor).Include(k => k.Items).ThenInclude(k => k.Mercadoria).FirstOrDefault(k => k.IdNotaCompra == idNotaCompra) ?? new();

        if (Model.IdNotaCompra == 0)
            ctx.Entry(Model).State = EntityState.Added;

        if (Model.Items.Count == 0)
            AddRow();

        CalcTotal();

        editContext = new EditContext(Model);

        base.OnInitialized();
    }

    compra? rowToDelete;
    void DeleteRow(bool confirm)
    {
        if (confirm)
        {
            Model!.Items.Remove(rowToDelete);
        }
        rowToDelete = null;
        StateHasChanged();
    }

    void MercadoriaChanged(compra c) {
        c.Mercadoria = ctx.Find<mercadoria>(c.Mercadoria_IdMercadoria);
    }

    EditContext editContext = default!;
    void DropdownClick(string value) {
        switch (value) {
            case "1": {
                editContext.Validate();
                break;
            }
            case "2": {
                AddRow();
                break;
            }
        }
    }
}
