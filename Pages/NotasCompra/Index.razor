@page "/NotasCompra/Index"
@using ProSoft.Data
@using ProSoft.Components
@using Microsoft.EntityFrameworkCore
@using BlazorBootstrap

<PageHeader Title="Notas de Compra" Description="Notas de entrada de estoque"></PageHeader>

@if (notascompra == null) {
    <p>Carregando...</p>
} else {

<GenericTemplate Items="notascompra">
    <TableHeader>
        <th>Id</th>
        <th>Número</th>
        <th>Data</th>
        <th>Fornecedor</th>
        <th>Valor</th>
        <th></th>
    </TableHeader>
    <RowTemplate Context="nfc">
        <td class="text-center"><a href="" @onclick="()=>AskEdit(nfc.IdNotaCompra)" @onclick:preventDefault>@nfc.IdNotaCompra.ToString("000000")</a></td>
        <td>@nfc.NumeroNF</td>
        <td>@nfc.Data.ToShortDateString()</td>
        <td>@nfc.Fornecedor?.Nome</td>
        <td>@nfc.Total.ToString("N2")</td>
        <td><a href="" @onclick="()=>askDelete=nfc" @onclick:preventDefault><i class="oi oi-trash"></i></a></td>
    </RowTemplate>
</GenericTemplate>

<div class="row justify-content-end">
    <div class="col-2">
        <button type="button" class="btn btn-primary" @onclick="()=>AskEdit(null)">+ Nota</button>
    </div>
</div>

}

@if (askEdit != null)
{
    <ModalDialog Title="Notas de Compra" Size="modal-fullscreen" OnCancel="()=>askEdit=null">
        <ModalBody>
            <PageHeader Title="Nota de Compra"></PageHeader>
            <Form idNotaCompra="askEdit.IdNotaCompra"></Form>
        </ModalBody>
        <ModalFooter>
            <button form="formId" type="submit" Class="btn btn-success">Salvar</button>
        </ModalFooter>
    </ModalDialog>
}

@if (askDelete!=null)
{
    <ModalConfirm Title="Excluir" Message="Confirma exclusão?"></ModalConfirm>
}

@code {
    notacompra? askEdit = null;
    notacompra? askDelete = null;

    mercadoria[] Mercadorias = Array.Empty<mercadoria>();

    void Delete()
    {
        if (askDelete == null)
            return;
            
        ctx.notascompra.Remove(askDelete);
        ctx.SaveChanges();
        LoadNotas();
//        message.ShowToast("Nota excluída com sucesso!", Services.ToastLevel.Success);
    }
    void AskEdit(long? idNF)
    {
        if (idNF == null)
            askEdit = new();
        else
            askEdit = ctx.notascompra.Find(idNF);
    }

    notacompra[]? notascompra;
    Contexto ctx = new Contexto();

    protected override async Task OnInitializedAsync()
    {
        Mercadorias = ctx.mercadorias.ToArray();
        notascompra = await LoadNotas();
    }

    Task<notacompra[]> LoadNotas()
    {
        try
        {
            return Task.FromResult(ctx.notascompra.Include(k => k.Fornecedor).Include(k=>k.Items).OrderBy(k => k.Data).ToArray());
        }
        catch
        {

        }
        finally
        {
        }
        return Task.FromResult( Array.Empty<notacompra>() );
    }
}
