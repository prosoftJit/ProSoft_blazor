@using ProSoft.Data
@using ProSoft.Components

@namespace ProSoft.Pages 

@typeparam TItem where TItem : class, new()

@if (HeaderTitle != null) {
    <PageHeader Title="@HeaderTitle" Description=@HeaderDescription>
        <BarItems>
        @if (HeaderBarItems != null) {
            @HeaderBarItems
        }
        </BarItems>
    </PageHeader>
}

@if (Items is null)
{
    <p>Nothing to show!</p>
} else {
    <table class="table table-hover w-100">
        <thead>
            <tr>@TableHeader
                <td style="width: 1%;"><FluentButton IconStart="new Icons.Regular.Size12.Add()" OnClick="()=>askEdit=new()"/></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr @onclick="()=>Edit(item)" style="cursor:pointer">@RowTemplate?.Invoke(item)
                    <td><FluentButton IconStart="new Icons.Regular.Size12.Delete()" OnClick="()=>askDelete=item" /></td>
                </tr>
            }
        </tbody>
        <tfoot>
            @TableFooter
        </tfoot>
    </table>
}

<ModalDialog Title="Editar" Size="modal-fullscreen" @bind-Visible=DialogVisible >
    <ModalBody>
        <EditForm Model="askEdit" id="editForm" OnValidSubmit="Submit" >
        @ItemEditForm?.Invoke(askEdit!)
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <FluentButton Appearance=Appearance.Filled Color="Color.Success" Type=ButtonType.Submit Id="submit" FormId="editForm">Salvar</FluentButton>
        <FluentButton Appearance=Appearance.Filled Color="Color.Error" FormId="editForm" OnClick="()=>askDelete=askEdit">Excluir</FluentButton>
    </ModalFooter>
</ModalDialog>


@if (askDelete != null) {
    <ModalConfirm Message="Confirma exclusão?" Title=Excluir OnClose=OnConfirmClose />
}

@code {
    [Parameter] public RenderFragment? TableHeader { get; set; }
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }
    [Parameter] public RenderFragment? TableFooter { get; set; }
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public string? HeaderTitle {get;set;} = null;
    [Parameter] public string? HeaderDescription {get;set;} = null;
    [Parameter] public RenderFragment? HeaderBarItems {get;set;} = null;
    [Parameter] public RenderFragment<TItem>? ItemEditForm {get;set;} = null;
    [Parameter] public Action<TItem>? ItemEditClick {get;set;} = null;
    [Parameter] public Action<TItem>? OnDelete {get;set;} = null;
    [Parameter, EditorRequired] public Contexto Contexto { get; set; } = default!;

    //[Inject] NotificationService notService { get; set; } = default!;

    bool DialogVisible { get { return askEdit != null && ItemEditForm != null; } set { if (!value) askEdit = null; } }

    TItem? askEdit = null;
    TItem? askDelete = null;

    void Edit(TItem item) {
        if (ItemEditForm != null)
            askEdit = item;
        if (ItemEditClick != null)
            ItemEditClick(item);
    }

    void OnConfirmClose(bool confirmation) {
        if (confirmation) {
            try {
                OnDelete?.Invoke(askDelete!);
                //notService.Notify(NotificationSeverity.Success, "ProSoft", "Item excluído com sucesso!");
            } catch {
                //notService.Notify(NotificationSeverity.Error, "ProSoft", "Erro excluindo ítem!");
            }
            askEdit = null;
        }
        askDelete = null;
        StateHasChanged();
    }

    void Submit()
    {
        if (Contexto.Entry(askEdit).State == EntityState.Detached)
            Contexto.Add(askEdit);

        Contexto.SaveChanges();

        //notService.Notify(NotificationSeverity.Success, "ProSoft", "Item salvo com sucesso!");
    }
}
