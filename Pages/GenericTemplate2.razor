@using ProSoft.Data
@using ProSoft.Components

@namespace ProSoft.Pages 

@typeparam TItem where TItem : class, new()

@if (HeaderTitle != null) {
    <PageHeader Title="@HeaderTitle" Description=@HeaderDescription>
        <BarItems>
        @if (HeaderBarItems != null) {
            @HeaderBarItems
        }
        <RadzenButton Icon=add Text=Novo Click="()=>askEdit=new()" />
        </BarItems>
    </PageHeader>
}

@if (Items is null)
{
    <p>Nothing to show!</p>
} else {
    <table class="table table-hover w-100">
        <thead>
            <tr>@TableHeader</tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr @onclick="()=>Edit(item)" style="cursor:pointer">@RowTemplate?.Invoke(item)</tr>
            }
        </tbody>
        <tfoot>
            @TableFooter
        </tfoot>
    </table>
}

@if (askEdit != null && ItemEditForm != null)
{
    <ModalDialog Title="Editar" Size="modal-fullscreen" OnCancel="()=>askEdit=null">
        <ModalBody>
            @ItemEditForm(askEdit)
        </ModalBody>
        <ModalFooter>
            <RadzenButton Icon=save Text="Salvar" ButtonType=ButtonType.Submit Form="@ItemEditFormId" />
            <RadzenButton Icon=delete Text="Excluir" Click="()=>askDelete=askEdit" ButtonStyle=ButtonStyle.Danger />
        </ModalFooter>
    </ModalDialog>
}

@if (askDelete != null) {
    <ModalConfirm Message="Confirma exclusão?" Title=Excluir OnClose=OnConfirmClose />
}

@code {
    [Parameter] public RenderFragment TableHeader { get; set; }
    [Parameter] public RenderFragment<TItem> RowTemplate { get; set; }
    [Parameter] public RenderFragment TableFooter { get; set; }
    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public string HeaderTitle {get;set;} = null;
    [Parameter] public string HeaderDescription {get;set;} = null;
    [Parameter] public RenderFragment HeaderBarItems {get;set;} = null;
    [Parameter] public RenderFragment<TItem> ItemEditForm {get;set;} = null;
    [Parameter] public string ItemEditFormId {get;set;} = "editForm";
    [Parameter] public Action<TItem> OnDelete {get;set;} = null;
    [Parameter, EditorRequired] public Contexto Contexto {get;set;}

    [Inject] NotificationService notificationService { get; set; } = default!;

    TItem askEdit = null;
    TItem askDelete = null;

    void Edit(TItem item) {
        askEdit = item;
    }

    void OnConfirmClose(bool confirmation) {
        if (confirmation) {
            try {
                OnDelete?.Invoke(askDelete);
                notificationService.Notify(NotificationSeverity.Success, "Orçamento", "Orçamento excluído com sucesso!");
            } catch {
                notificationService.Notify(NotificationSeverity.Error, "Orçamento", "Erro excluindo ítem!");
            }
            askEdit = null;
        }
        askDelete = null;
        StateHasChanged();
    }
}
