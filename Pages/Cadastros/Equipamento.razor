@page "/Cadastros/Equipamento"
@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Components
@using ProSoft.Pages.Cadastros


<DataAnnotationsValidator />

<FluentGrid>
    <FluentGridItem md="3">
        <FluentTextField Label="Id do Equipamento" Value=@Model.IdEquipamento.ToString("000000") Disabled=true />
    </FluentGridItem>
    <FluentGridItem md="9">

        <FluentCombobox Label="Cliente" Autocomplete=ComboboxAutocomplete.Inline Items="ctx!.clientes" TOption="cliente" OptionText="(o)=>o.Nome" @bind-SelectedOption=Model.Cliente Required />
        <FluentButton IconStart="new Icons.Regular.Size12.Edit()" OnClick="()=>askEditCli=Model.Cliente??new()" />

        <FluentValidationMessage For="()=>Model.Cliente" />
        </FluentGridItem>
    <FluentGridItem md="12">
        <FluentTextArea @bind-Value="Model.Descricao" Label="Descrição" Rows="5" Required />
        <FluentValidationMessage For="()=>Model.Descricao" />
        </FluentGridItem>
</FluentGrid>

<ModalDialog Title="Cliente" Size="modal-fullscreen" @bind-Visible=ModalVisible>
    <ModalBody>
        <EditForm Model="askEditCli" id="cliForm" OnValidSubmit="ClienteSubmit">
            <Cliente Model="askEditCli" />
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <FluentButton Type="ButtonType.Submit" Id="submit" FormId="cliForm">Salvar</FluentButton>
    </ModalFooter>
</ModalDialog>

 @code {
    [Parameter] public equipamento Model { get; set; } = new();
    [Parameter, EditorRequired] public Contexto ctx {get;set;} = default!;

    bool ModalVisible { get { return askEditCli != null; } set { if (!value) askEditCli = null; } }

    cliente cli = new();

    cliente? askEditCli = null;

    bool EditClienteHidden
    {
        get { return askEditCli == null; }
        set { if (value == true) askEditCli = null; }
    }

    void ClienteSubmit()
    {
        if (askEditCli!.idCliente == 0)
            ctx.clientes.Add(askEditCli);

        ctx.SaveChanges();

        askEditCli = null;
    }

    // async void EditCliente() {
    //     cliente c = ctx!.clientes.Find(Model.Cliente_IdCliente) ?? new();

    //     await dialogService.OpenAsync<Cliente>(
    //         $"Cliente ID: {c.idCliente.ToString("000000")}",
    //         new Dictionary<string, object>() { { "idCliente", c.idCliente } },
    //         new DialogOptions() { Width = "700px", Height = "530px", Resizable = true }
    //     );    
    // }
}