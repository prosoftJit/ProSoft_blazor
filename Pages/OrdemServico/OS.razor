@page "/OrdemServico/OS"
@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Components
@using Microsoft.EntityFrameworkCore

<RadzenFormField Text="Id">
    <RadzenNumeric Format="000000" Value="Model.IdOrdemDeServico" Disabled=true />
</RadzenFormField>
<RadzenFormField Text="Data">
    <RadzenDatePicker @bind-Value=Model.Data />
</RadzenFormField>
<RadzenFormField Text="Equipamento">
    <RadzenDropDown @bind-Value=Model.Equipamento Data="ctx.equipamentos" TextProperty="Descricao" />
</RadzenFormField>
<RadzenFormField Text="Resp. Entrada">
    <RadzenDropDown @bind-Value=Model.FuncionarioEnt Data="ctx.funcionarios" TextProperty="Nome" />
</RadzenFormField>
<RadzenFormField Text="Detalhes do Equipamento">
    <RadzenTextArea Rows="5" @bind-Value=Model.Acessorios />
</RadzenFormField>
<RadzenFormField Text="Defeito Apresentado">
    <RadzenTextArea Rows="5" @bind-Value=Model.DefeitoApresentado />
</RadzenFormField>

@foreach (orcamento os in Model.Orcamentos) {

    <GenericTemplate3 
        Items="os.Items.AsQueryable()" 
        TItem="itemdoorcamento"
        Contexto="ctx"
        >
        <GridHeaderTemplate>
            <th>Quant</th>
            <th>Un</th>
            <th>Descrição</th>
            <th>P. Venda</th>
            <th>Desconto</th>
            <th>Total</th>
        </GridHeaderTemplate>
        <GridRowTemplate Context="p">
            <OrcamentoItem Model="p" Contexto="ctx" 
                OnNeedCompras="()=>ctx.compras.Include(k=>k.Mercadoria).OrderBy(k=>k.Mercadoria.Descricao).ToArray()"
                TotalChanged="TotalChanged" />
        </GridRowTemplate>
        <GridFooterTemplate>
            <td colspan="5" class="text-end">Total</td>
            <td>@_total.ToString("N2")</td>
        </GridFooterTemplate>
    </GenericTemplate3>
}

<ModalDialog Title="Editar equipamento" Size="modal-lg" @bind-Visible=ShowDialogEq>
    <ModalBody>
        <EditForm Model=askEditEqp OnValidSubmit=EqpSubmit id="eqpForm">
            <ProSoft.Pages.Cadastros.Equipamento Model="askEditEqp" ctx=ctx />
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <RadzenButton ButtonType=Radzen.ButtonType.Submit form="eqpForm">Salvar</RadzenButton>
    </ModalFooter>
</ModalDialog>

<ModalDialog Title="Editar funcionario" Size="modal-lg" @bind-Visible=ShowDialogFunc>
    <ModalBody>
        <EditForm Model=askEditFunc OnValidSubmit=FuncSubmit id="funcForm">
            <ProSoft.Pages.Cadastros.Funcionario Model="askEditFunc" />
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <RadzenButton ButtonType="Radzen.ButtonType.Submit" form="funcForm">Salvar</RadzenButton>
    </ModalFooter>
</ModalDialog>


@code {
    [Parameter] public ordemdeservico Model { get; set; } = default!;
    [Parameter] public Contexto Contexto { get; set; } = default!;

    equipamento? Equip
    {
        get { return Model.Equipamento; }
        set { Model.Equipamento = value; }
    }
    funcionario? FuncEnt
    {
        get { return Model.FuncionarioEnt; }
        set { Model.FuncionarioEnt = value; }
    }

    private Contexto ctx = new();

    DateTime? Data
    {
        get { return Model.Data; }
        set { Model.Data = value ?? DateTime.Today; }
    }

    float _total;
    void TotalChanged(float total)
    {
        _total = total;
    }

    funcionario? askEditFunc = null;
    bool ShowDialogFunc { get { return askEditFunc != null; } set { if (!value) askEditFunc = null; } }
    void FuncSubmit()
    {
        if (askEditFunc.IdFuncionario == 0)
            ctx.funcionarios.Add(askEditFunc);
        ctx.SaveChanges();
        askEditFunc = null;
    }

    equipamento? askEditEqp = null;
    bool ShowDialogEq { get { return askEditEqp != null; } set { if (!value) askEditEqp = null; } }
    void EditEquipamento(equipamento? eqp)
    {
        askEditEqp = eqp ?? new();
    }

    void EqpSubmit() {
        if (askEditEqp.IdEquipamento == 0)
            ctx.equipamentos.Add(askEditEqp);

        ctx.SaveChanges();
        askEditEqp = null;
    }
}