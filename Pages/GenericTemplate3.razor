@using ProSoft.Data
@using ProSoft.Components

@namespace ProSoft.Pages 

@typeparam TItem where TItem : class, new()

@if (HeaderTitle != null) {
    <PageHeader Title="@HeaderTitle" Description=@HeaderDescription>
        <BarItems>
        @if (HeaderBarItems != null) {
            @HeaderBarItems
        }
        </BarItems>
    </PageHeader>
}

<style>
    td
    {
        padding-top: 2px !important;
        padding-bottom: 2px !important;
    }
    tr { cursor: pointer; }
</style>

<table class="table table-hover w-100" border="1">
    <thead>
        <tr>
            @HeaderTemplate
            <RadzenStack Gap="1" Orientation="Radzen.Orientation.Horizontal">
                <RadzenButton Size=Radzen.ButtonSize.Small Icon="add" Click="()=>{askEdit=new();StateHasChanged();}" />
            </RadzenStack>
        </tr>
    </thead>
    <tbody>
    @if (Items is not null && RowTemplate is not null)
    {
        @foreach (TItem ti in Items)
        {
            <tr>
                @RowTemplate(ti)
                <td style="width:1%">
                    <RadzenStack Gap="1" Orientation="Radzen.Orientation.Horizontal">
                        <RadzenButton Size=Radzen.ButtonSize.Small Icon="edit" Click="()=>askEdit=ti"/>
                        <RadzenButton Size=Radzen.ButtonSize.Small Icon="delete" Click="()=>askDelete=ti"/>
                    </RadzenStack>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<ModalDialog Title="Editar" Size="@ModalSize" @bind-Visible=DialogVisible >
    <ModalBody>
        <RadzenTemplateForm TItem=TItem Data="askEdit" id="editForm" Submit="()=>OnSubmit?.Invoke(askEdit!)" >
        @ItemEditForm?.Invoke(askEdit!)
        </RadzenTemplateForm>
    </ModalBody>
    <ModalFooter>
        <RadzenButton form="editForm" ButtonType="Radzen.ButtonType.Submit" Icon="save" Text="Salvar"/>
    </ModalFooter>
</ModalDialog>

@if (askDelete != null) {
    <ModalConfirm Message="Confirma exclusão?" Title=Excluir OnClose=OnConfirmClose />
}

@code {
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; } = null;
    [Parameter] public RenderFragment? HeaderTemplate { get; set; } = null;
    [Parameter] public Action<TItem>? OnSubmit { get; set; } = null;

    [Parameter] public RenderFragment GridContent { get; set; } = default!;
    [Parameter] public IQueryable<TItem>? Items { get; set; }
    [Parameter] public string? HeaderTitle {get;set;} = null;
    [Parameter] public string? HeaderDescription {get;set;} = null;
    [Parameter] public RenderFragment? HeaderBarItems {get;set;} = null;
    [Parameter] public RenderFragment<TItem>? ItemEditForm {get;set;} = null;
    [Parameter] public Action<TItem>? ItemEditClick {get;set;} = null;
    [Parameter] public Action<TItem>? OnDelete {get;set;} = null;
    [Parameter, EditorRequired] public Contexto Contexto { get; set; } = default!;
    [Parameter] public string ModalSize { get; set; } = "modal-fullscreen";

    //[Inject] NotificationService notService { get; set; } = default!;

    PaginationState paginator = new PaginationState { ItemsPerPage = 10 };

    bool DialogVisible { get { return askEdit != null && ItemEditForm != null; } set { if (!value) askEdit = null; } }

    TItem? askEdit = null;
    TItem? askDelete = null;

    void Edit(TItem item) {
        if (ItemEditForm != null)
            askEdit = item;
        if (ItemEditClick != null)
            ItemEditClick(item);
    }

    void OnConfirmClose(bool confirmation) {
        if (confirmation) {
            try {
                OnDelete?.Invoke(askDelete!);

                Contexto.Remove(askDelete);
                Contexto.SaveChanges();

                //notService.Notify(NotificationSeverity.Success, "ProSoft", "Item excluído com sucesso!");
            } catch {
                //notService.Notify(NotificationSeverity.Error, "ProSoft", "Erro excluindo ítem!");
            }
            askEdit = null;
        }
        askDelete = null;
        StateHasChanged();
    }

    void Submit(TItem item)
    {
        if (!Contexto.Set<TItem>().Contains(item))
            Contexto.Add(askEdit);

        Contexto.SaveChanges();

        //notService.Notify(NotificationSeverity.Success, "ProSoft", "Item salvo com sucesso!");
    }
}
