@page "/NotasVenda/Index"
@using ProSoft.Data
@using Microsoft.EntityFrameworkCore
@using ProSoft.Components

<GenericTemplate2  
    OnDelete=OnDelete
    Items="notasvenda" 
    Contexto=ctx 
    TItem=notavenda
    HeaderTitle="Notas de Venda" 
    HeaderDescription="Notas de saída do estoque" 
    >
    <TableHeader>
        <th>Id</th>
        <th>Número</th>
        <th>Data</th>
        <th>Cliente</th>
        <th>Valor</th>
    </TableHeader>
    <RowTemplate Context="nfc">
        <td class="text-center">@nfc.IdNotaVenda.ToString("000000")</td>
        <td></td>
        <td>@nfc.Data.ToShortDateString()</td>
        <td>@nfc.Cliente?.Nome</td>
        <td>@(nfc.Items.Sum(k=>(k.Quantidade * k.Compra?.Venda)-k.Desconto)?.ToString("N2"))</td>
    </RowTemplate>
    <ItemEditForm Context=nv>
        <NotaVenda idNotaVenda="nv.IdNotaVenda" />
    </ItemEditForm>
</GenericTemplate2>

@if (askEdit > 0)
{
    <ModalDialog Title="Notas de Venda" Size="modal-fullscreen" OnCancel="()=>askEdit=0">
        <ModalBody>
            <PageHeader Title="Nota de Venda"></PageHeader>
            <NotaVenda idNotaVenda="askEdit"></NotaVenda>
        </ModalBody>
        <ModalFooter>
            <button form="editForm" type="submit" Class="btn btn-success">Salvar</button>
        </ModalFooter>
    </ModalDialog>
}

@if (askDelete!=null)
{
    @* <ModalConfirm Title="Excluir" Message="Confirma exclusão?"></ModalConfirm> *@
}

@code {
    long askEdit = 0;
    notavenda? askDelete = null;
    //[Inject] NotificationService notificationService { get; set; } = default!;
    compra[] compras = Array.Empty<compra>();

    void OnDelete(notavenda nv) {

    }

    void Delete()
    {
        if (askDelete != null) {
            ctx.notasvenda.Remove(askDelete);
            ctx.SaveChanges();
            LoadNotas();
            //notificationService.Notify(NotificationSeverity.Success, "Venda", "Nota excluída com sucesso!");
        }
    }

    notavenda[]? notasvenda;
    Contexto ctx = new Contexto();

    protected override async Task OnInitializedAsync()
    {
        compras = ctx.compras.ToArray();
        notasvenda = await LoadNotas();
    }

    Task<notavenda[]> LoadNotas()
    {
        try
        {
//            PreloadService.Show();
            return Task.FromResult(ctx.notasvenda.Include(k => k.Cliente).Include(k=>k.Items).ThenInclude(k=>k.Compra).OrderBy(k => k.Data).ToArray());
        }
        catch
        {

        }
        finally
        {
//           PreloadService.Hide();
        }
        return Task.FromResult( Array.Empty<notavenda>() );
    }
}
