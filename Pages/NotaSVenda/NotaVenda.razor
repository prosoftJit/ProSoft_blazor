@page "/NotaVenda/{idNotaVenda:long}"
@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Components
@using Microsoft.EntityFrameworkCore
@using ProSoft.Pages.Cadastros

<DataAnnotationsValidator />
<ValidationSummary Model="Model" />

<RadzenRow>
    <RadzenColumn Size="1">
        <RadzenFormField Text="Id">
            <RadzenNumeric Format="000000" Value="Model.IdNotaVenda" TextAlign="Radzen.TextAlign.Center" ShowUpDown=false />
        </RadzenFormField>
    </RadzenColumn>
    <RadzenColumn Size="3">
        <RadzenFormField Text="Cliente">
            <RadzenDropDown TValue="long?" @bind-Value=Model.Cliente_IdCliente TextProperty="Nome" ValueProperty="IdCliente" Data="ctx.clientes.OrderBy(k=>k.Nome)" />
        </RadzenFormField>
    </RadzenColumn>
</RadzenRow>

<table class="table w-100">
<thead>
    <tr>
        <td>Quant.</td>
        <td>Un.</td>
        <td>Descrição</td>
        <td>Unitário</td>
        <td>Desconto</td>
        <td>Total</td>
        <td><RadzenButton Icon="add" Click="()=>AddVenda()" /></td>
    </tr>
</thead>
<tbody>
@foreach (venda v in Model.Items)
{
    <Venda_row Model="v" Compras="ctx.compras" @bind-Total=total />
}
</tbody>
<tfoot>
    <tr>
        <td colspan="4"></td>
        <td>Total</td>
        <td align="right">@total.ToString("N2")</td>
    </tr>
</tfoot>
</table>


@code {
    private notavenda Model = new();
    [Parameter] public long idNotaVenda { get; set; } = 0;

    private Contexto ctx = new();

    cliente? editCliente = null;

    float total = 0;

    protected override void OnInitialized() {
        Model = ctx.notasvenda.FirstOrDefault(k=>k.IdNotaVenda==idNotaVenda)??new();

        if (Model.Items.Count == 0)
            AddVenda();
    }

    void Submit(notavenda nv)
    {
        if (Model.IdNotaVenda == 0)
            ctx.notasvenda.Add(Model);

        ctx.SaveChanges();

        StateHasChanged();
    }

    void AddVenda()
    {
        venda ve = new();
        Model.Items.Add(ve);
        StateHasChanged();
    }

    venda? askDeleteVenda = null;
    void AskDeleteRow(venda venda)
    {


        askDeleteVenda = venda;
        StateHasChanged();
    }
    void DeleteRow(bool confirm)
    {
        if (confirm)
            Model.Items.Remove(askDeleteVenda);
        askDeleteVenda=null;
        StateHasChanged();
    }

    float TotalVendas()
    {
        return Model.Items.Sum(k => (k.Quantidade * (k.Compra?.Venda ?? 0) - k.Desconto));
    }

    cliente[] GetClientes(BlazorBootstrap.FilterItem filter)
    {
        return ctx.clientes.Where(k => k.Nome.Contains(filter.Value)).ToArray();
    }

    void DeleteParcela(contaareceber cr)
    {
        if (Model.Parcelas.Count > 1)
        {
            Model.Parcelas.Remove(cr);
            StateHasChanged();
        }
    }
    void AddParcela()
    {
        contaareceber cr = new();
        Model.Parcelas.Add(cr);
        StateHasChanged();
    }
    void ClienteChanged() {
        Model.Cliente = ctx.clientes.Find(Model.Cliente_IdCliente);
    }
}