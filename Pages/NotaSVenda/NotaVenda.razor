@page "/NotaVenda/{idNotaVenda:long}"
@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Components
@using Microsoft.EntityFrameworkCore
@using ProSoft.Pages.Cadastros

<CascadingValue Name="ctx" Value="ctx">
    <RadzenTemplateForm TItem="notavenda" Data="Model" Submit="Submit" id="editForm">

        <DataAnnotationsValidator />
        <ValidationSummary Model="Model" />

        <RadzenRow>
            <RadzenColumn Size="1">
                <RadzenFormField Text="Id" >
                    <RadzenNumeric Format="000000" ShowUpDown=false Disabled=true Value="@Model.IdNotaVenda" />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn Size="3">
                <RadzenFormField Text="Cliente" >
                    <Dropdown2 TItem="cliente" @bind-Value=Model.Cliente TextProperty="Nome" GetItems="()=>ctx.clientes.OrderBy(k=>k.Nome)" OnChange="(i)=>Model.Cliente=i" OnDelete="(c, i)=>{c.Remove(i); c.SaveChanges();}">
                        <OnEdit Context=cli>
                            <Cliente idCliente="cli.idCliente" />
                        </OnEdit>
                    </Dropdown2>
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>

        <GenericTemplate Items="Model.Items" TItem="venda" OnAdd="AddVenda" OnDelete="(i)=>Model.Items.Remove(i)">
            <TableHeader>
                <th>Quant</th>
                <th>Un</th>
                <th>Descrição</th>
                <th>P. Venda</th>
                <th>Desconto</th>
                <th>Total</th>
            </TableHeader>
            <RowTemplate Context="itemsCtx">
                <Venda_row Model="itemsCtx" OnNeedCompras="()=>ctx.compras.Include(k=>k.Mercadoria).OrderBy(k=>k.Mercadoria.Descricao).ToArray()" />
            </RowTemplate>
            <TableFooter>
                <tr>
                    <td colspan="5" class="text-end">Total</td>
                    <td><RadzenNumeric Format="N2" Value="@TotalVendas()" TextAlign="TextAlign.End" ShowUpDown=false /></td>
                </tr>
            </TableFooter>
        </GenericTemplate>

        <GenericTemplate Items="Model.Parcelas" TItem="contaareceber">
            <TableHeader>
                <th>Vencimento</th>
                <th>Valor</th>
                <th><button type="button" class="btn btn-link" @onclick="AddParcela"><i class="oi oi-plus"></i></button></th>
            </TableHeader>
            <RowTemplate Context="parc">
                <ProSoft.Pages.NotasVenda.Parcela Model="parc" OnDelete="DeleteParcela" OnTotalChanged="()=>StateHasChanged()" />
            </RowTemplate>
            <TableFooter>
                <tr>
                    <td class="text-end">Total</td>
                    <td><RadzenNumeric Format="N2" TextAlign="TextAlign.End" ShowUpDown=false Disabled=true Value="@Model.Parcelas.Sum(k=>k.Valor)" /></td>
                </tr>
            </TableFooter>
        </GenericTemplate>

    </RadzenTemplateForm>
</CascadingValue>


@code {
    private notavenda Model = new();
    [Parameter] public long idNotaVenda { get; set; } = 0;

    private Contexto ctx = new();

    cliente? editCliente = null; 

    protected override void OnInitialized() {
        Model = ctx.notasvenda.Include(k=>k.Cliente).Include(k=>k.Items).ThenInclude(k=>k.Compra).ThenInclude(k=>k.Mercadoria).Include(k=>k.Parcelas).FirstOrDefault(k=>k.IdNotaVenda==idNotaVenda)??new();

        if (Model.Items.Count == 0)
            AddVenda();
    }

    void Submit(notavenda nv)
    {
        if (nv.IdNotaVenda == 0)
            ctx.Entry(nv).State = Microsoft.EntityFrameworkCore.EntityState.Added;
        else
            ctx.Entry(nv).State = Microsoft.EntityFrameworkCore.EntityState.Modified;

        ctx.SaveChanges();

        StateHasChanged();
    }

    void AddVenda()
    {
        venda ve = new venda { Quantidade=0, Compra=null };
        Model.Items.Add(ve);
        StateHasChanged();
    }

    venda? askDeleteVenda = null;
    void AskDeleteRow(venda venda)
    {


        askDeleteVenda = venda;
        StateHasChanged();
    }
    void DeleteRow(bool confirm)
    {
        if (confirm)
            Model.Items.Remove(askDeleteVenda);
        askDeleteVenda=null;
        StateHasChanged();
    }

    float TotalVendas()
    {
        return Model.Items.Sum(k => (k.Quantidade * (k.Compra?.Venda ?? 0) - k.Desconto));
    }

    cliente[] GetClientes(BlazorBootstrap.FilterItem filter)
    {
        return ctx.clientes.Where(k => k.Nome.Contains(filter.Value)).ToArray();
    }

    void DeleteParcela(contaareceber cr)
    {
        if (Model.Parcelas.Count > 1)
        {
            Model.Parcelas.Remove(cr);
            StateHasChanged();
        }
    }
    void AddParcela()
    {
        contaareceber cr = new();
        Model.Parcelas.Add(cr);
        StateHasChanged();
    }
    void ClienteChanged() {
        Model.Cliente = ctx.clientes.Find(Model.Cliente_IdCliente);
    }
}