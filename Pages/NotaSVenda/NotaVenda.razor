@page "/NotaVenda/{idNotaVenda:long}"
@using System.ComponentModel.DataAnnotations
@using ProSoft.Data
@using ProSoft.Components
@using Microsoft.EntityFrameworkCore
@using ProSoft.Pages.Cadastros

<CascadingValue Name="ctx" Value="ctx">
    <EditForm Model="Model" OnValidSubmit="Submit" id="editForm">

        <DataAnnotationsValidator />
        <ValidationSummary Model="Model" />

        <FluentGrid>
            <FluentGridItem md="1">
                <FluentTextField Label="Id" Value="@Model.IdNotaVenda.ToString("000000")"/>
            </FluentGridItem>
            <FluentGridItem md="3">
                <FluentCombo Label="Cliente" @bind-Value=Model.Cliente OptionText="c=>c.Nome" Items="ctx.clientes.OrderBy(k=>k.Nome)">
                    <OnEdit Context="itm">
                        <Cliente Model="itm" />
                    </OnEdit>
                </FluentCombo>
                <FluentCombobox Label="Cliente" @bind-SelectedOption=Model.Cliente OptionText="(c)=>c.Nome" Items="ctx.clientes.OrderBy(k=>k.Nome)" />
            </FluentGridItem>
        </FluentGrid>

        <FluentDataGrid GenerateHeader=GenerateHeaderOption.None TGridItem="venda" role="grid">
            <FluentDataGridRow RowType="DataGridRowType.Header">
                <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader">Quant.</FluentDataGridCell>
                <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader">Un.</FluentDataGridCell>
                <FluentDataGridCell GridColumn=3 CellType="DataGridCellType.ColumnHeader">Descrição</FluentDataGridCell>
                <FluentDataGridCell GridColumn=4 CellType="DataGridCellType.ColumnHeader">Unitário</FluentDataGridCell>
                <FluentDataGridCell GridColumn=5 CellType="DataGridCellType.ColumnHeader">Desconto</FluentDataGridCell>
                <FluentDataGridCell GridColumn=6 CellType="DataGridCellType.ColumnHeader">Total</FluentDataGridCell>
            </FluentDataGridRow>
            @foreach (venda v in Model.Items)
            {
                <FluentDataGridRow Item="v" TGridItem="venda">
                    <FluentDataGridCell GridColumn=1><FluentNumberField @bind-Value=v.Quantidade /></FluentDataGridCell>
                    <FluentDataGridCell GridColumn=2><FluentTextField Value="@v.Compra?.Mercadoria.Unidade" /></FluentDataGridCell>
                    <FluentDataGridCell GridColumn=3>
                        <FluentCombo Context="ctx" Items="ctx.compras" OptionText="e=>e.Descricao" TItem="compra">
                        </FluentCombo>
                    </FluentDataGridCell>
                    <FluentDataGridCell GridColumn=4><FluentNumberField Value=@(v.Compra?.Venda) Step="0.01" /></FluentDataGridCell>
                    <FluentDataGridCell GridColumn=5><FluentNumberField @bind-Value=v.Desconto Step="0.01" /></FluentDataGridCell>
                    <FluentDataGridCell GridColumn=6><FluentNumberField Value="@((v.Quantidade*(v.Compra?.Venda??0))-v.Desconto)" Step="0.01" /></FluentDataGridCell>
                </FluentDataGridRow>
            }
        </FluentDataGrid>

    </EditForm>
</CascadingValue>


@code {
    private notavenda Model = new();
    [Parameter] public long idNotaVenda { get; set; } = 0;

    private Contexto ctx = new();

    cliente? editCliente = null; 

    protected override void OnInitialized() {
        Model = ctx.notasvenda.Include(k=>k.Cliente).Include(k=>k.Items).ThenInclude(k=>k.Compra).ThenInclude(k=>k.Mercadoria).Include(k=>k.Parcelas).FirstOrDefault(k=>k.IdNotaVenda==idNotaVenda)??new();

        if (Model.Items.Count == 0)
            AddVenda();
    }

    void Submit()
    {
        if (Model.IdNotaVenda == 0)
            ctx.Entry(Model).State = Microsoft.EntityFrameworkCore.EntityState.Added;
        else
            ctx.Entry(Model).State = Microsoft.EntityFrameworkCore.EntityState.Modified;

        ctx.SaveChanges();

        StateHasChanged();
    }

    void AddVenda()
    {
        venda ve = new venda { Quantidade=0, Compra=null };
        Model.Items.Add(ve);
        StateHasChanged();
    }

    venda? askDeleteVenda = null;
    void AskDeleteRow(venda venda)
    {


        askDeleteVenda = venda;
        StateHasChanged();
    }
    void DeleteRow(bool confirm)
    {
        if (confirm)
            Model.Items.Remove(askDeleteVenda);
        askDeleteVenda=null;
        StateHasChanged();
    }

    float TotalVendas()
    {
        return Model.Items.Sum(k => (k.Quantidade * (k.Compra?.Venda ?? 0) - k.Desconto));
    }

    cliente[] GetClientes(BlazorBootstrap.FilterItem filter)
    {
        return ctx.clientes.Where(k => k.Nome.Contains(filter.Value)).ToArray();
    }

    void DeleteParcela(contaareceber cr)
    {
        if (Model.Parcelas.Count > 1)
        {
            Model.Parcelas.Remove(cr);
            StateHasChanged();
        }
    }
    void AddParcela()
    {
        contaareceber cr = new();
        Model.Parcelas.Add(cr);
        StateHasChanged();
    }
    void ClienteChanged() {
        Model.Cliente = ctx.clientes.Find(Model.Cliente_IdCliente);
    }
}